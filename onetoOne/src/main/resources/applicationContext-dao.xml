<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd">


	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!--<value>file:/var/server-config/auth/data-access.properties</value>-->
				<value>classpath:druid.properties</value>
			</list>
		</property>
		<property name="fileEncoding">
			<value>UTF-8</value>
		</property>
	</bean>

	<context:component-scan base-package="com.ooteco"/>


	<!-- 引入jdbc配置文件 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${dbusername}" />
		<property name="password" value="${dbpassword}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${maxActive}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${minIdle}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<!-- 超过时间限制多长； -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句 -->
		<property name="validationQuery" value="${validationQuery}" />
		<!-- 申请连接的时候检测 -->
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnReturn" value="${testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
				  value="${maxPoolPreparedStatementPerConnectionSize}" />
		<!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j 防御SQL注入的filter:wall -->
		<property name="filters" value="${filters}" />
		<!-- 设置编码 -->
		<property name="connectionInitSqls" value="set names utf8mb4;"/>
	</bean>

	<!-- TRANSACTION MANAGER CONFIGURATION -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- 创建SqlSessionFactory，同时指定数据源 -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置mybatis全局文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 扫描entity包，使用别名 -->
		<property name="typeAliasesPackage" value="com.ooteco.entity" />
		<!-- 扫描sql配置文件 ,mapper需要的xml-->
		<property name="mapperLocations" >
			<list>
				<value>classpath*:mapper/*.xml</value>
				<value>classpath*:mapper/**/*.xml</value>
				<!--<value>classpath*:mapper/ext/*.xml</value>-->
			</list>
		</property>
	</bean>

	<!-- 配置扫描的dao接口包，动态实现Dao接口，注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出需要扫描的dao接口包 -->
		<property name="basePackage" value="com.ooteco.dao" />
	</bean>

	<!-- 配置基于注解的声明式事务 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- 扫描service报下的所有使用注解的类型-->
	<!--<context:component-scan base-package="com.ooteco.service"/>-->
</beans>